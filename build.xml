<?xml version="1.0" encoding="UTF-8"?>
<project name="minerva-website" basedir="." default="build">

    <!--
         Build configuration {{{
    -->

    <property name="ws" value="${project.basedir}" />
    <!-- }}} -->

    <!--
         Main targets {{{
    -->

    <!-- Build application -->
    <target name="build" description="Build the application" depends="-prepare,configure,composer,empty-all-cache,assets" />
    <!--<target name="build" description="Build the application" depends="-prepare,configure,vhost,composer,empty-all-cache,migrate,assets" />-->

    <!-- }}} -->

    <!--
         Setup and teardown {{{
    -->

    <!-- Clean build environment -->
    <target name="clean" description="Remove files generated by the build process (ex. vendor files).">
        <delete file="${ws}/app/config/apache2.conf" />
    </target>

    <target name="distclean" description="Remove files generated by the build process (inc. vendor files)." depends="clean">
        <delete dir="${ws}/node_modules" />
        <delete dir="${ws}/vendor" />
    </target>

    <!-- Create directories and set file modes -->
    <target name="-prepare" depends="set-env">

        <!-- find user name -->
        <if>
            <and>
                <isset property="env.SUDO_USER" />
                <equals arg1="${env.USER}" arg2="root" />
            </and>
            <then><property name="phing.user" value="${env.SUDO_USER}" /></then>
            <else><property name="phing.user" value="${env.USER}" /></else>
        </if>

        <!-- Clean username of illegal characters -->
        <property name="phing.user.safe" value="${phing.user}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[^a-zA-Z0-9_]" replace="" />
                </replaceregexp>
            </filterchain>
        </property>

        <property file="build.custom.properties"  />
        <property file="build.${env}.properties"  />
        <property file="build.properties"  />

        <chmod mode="0755" file="${ws}/bin/console" />
        <chmod mode="0777" file="${ws}/var" />
        <chmod mode="0777" file="${ws}/var/cache" />
        <chmod mode="0777" file="${ws}/var/logs" />
    </target>

    <target name="-prepare-executables" depends="set-env">
        <!--<chmod mode="0755" file="${ws}/bin/gulp" />-->
        <!--<chmod mode="0755" file="${ws}/bin/mustache" />-->
    </target>
    <!-- }}} -->

    <!--
         Configuration management {{{
    -->

    <!-- Read environment definition file -->
    <target name="-read-env" unless="env">
        <available file="${ws}/app/config/environment" property="env.exists" />
        <fail unless="env.exists" message="app/config/environment does not exist. You must pass an environment using -Denv=dev|ci|test|pqa|production" />
        <loadfile property="env" file="${ws}/app/config/environment" />
    </target>

    <!-- Set the environment file -->
    <target name="set-env" description="Set the environment dev|ci|test|pqa|production" depends="-read-env">
        <echo file="${ws}/app/config/environment" msg="${env}" />
        <echo msg="Using environment: ${env}" />
    </target>

    <!-- Generate configuration files -->
    <target name="configure" depends="-prepare" unless="configure.generated" description="Generate all configuration files. Use `-Dconfigure.overwrite=true` to overwrite existing configurations.">
        <exportproperties targetfile="${ws}/var/build.properties" disallowedPropertyPrefixes="os.,env.,line.,host.,php.version,phing." />
        <exec command="sort ${ws}/var/build.properties -o ${ws}/var/build.properties" passthru="true" />
        <property name="configure.generated" value="true" />
    </target>

    <!-- }}} -->

    <!--
         Database management {{{
    -->

    <!-- Migrate database -->
    <target name="migrate">
        <exec command="php ${ws}/bin/console doctrine:migrations:migrate --no-interaction" passthru="true" />
    </target>

    <!-- }}} -->

    <!--
         Asset management {{{
    -->

    <target name="assets" description="Compile and install all assets" depends="bower,bundle-assets,gulp" />

    <target name="bower" description="Install bower assets">
        <exec command="bower install" passthru="true" dir="${ws}" />
    </target>

    <target name="npm" description="Install npm modules">
        <exec command="npm install" passthru="true" dir="${ws}" />
    </target>

    <target name="bundle-assets" description="Install bundle assets" unless="composer.updated">
        <exec command="${ws}/bin/console assets:install --symlink ${ws}/HTML" passthru="true" />
    </target>

    <target name="gulp" description="Build assets with Gulp" depends="-prepare,npm,-prepare-executables">
        <!--<exec command="npm ${ws}/bin/gulp" passthru="true" />-->
        <exec command="gulp" passthru="true" />
    </target>

    <!-- }}} -->

    <!--
         Vhost management {{{
    -->

    <!-- Generate vhost config -->
    <!--<target name="vhost" description="Generate vhost configuration" depends="-generate-vhost" unless="vhost.ignore">-->
        <!--<exec command="sudo deployvhost ${ws}/app/config/apache2.conf ${phing.project.name} ${env}" passthru="true" />-->
    <!--</target>-->

    <!--<target name="-generate-vhost" description="Generate vhost configuration" depends="configure,npm,composer,-prepare-executables">-->
        <!--<exec command="${ws}/bin/ini2json ${ws}/var/build.properties | ${ws}/bin/mustache - ${ws}/app/config/apache2.conf.mustache > ${ws}/app/config/apache2.conf" passthru="true" />-->
    <!--</target>-->

    <!-- }}} -->

    <!--
         Cache management {{{
    -->

    <!-- Clean up all caches -->
    <target name="empty-all-cache" description="Empty all caches" depends="empty-symfony-cache,empty-doctrine-cache"/>

    <target name="empty-symfony-cache" description="Empty the symfony cache">
        <exec command="php ${ws}/bin/console cache:clear" passthru="true" />
    </target>

    <target name="empty-doctrine-cache" description="Empty the doctrine cache">
        <exec command="php ${ws}/bin/console doctrine:cache:clear-metadata" passthru="true" />
        <exec command="php ${ws}/bin/console doctrine:cache:clear-query" passthru="true" />
        <exec command="php ${ws}/bin/console doctrine:cache:clear-result" passthru="true" />
    </target>

    <!-- }}} -->

    <!--
         Composer management {{{
    -->
    <target name="composer" depends="-prepare">
        <composer command="install" composer="${composer.path}">
            <arg value="--prefer-dist" />
        </composer>
        <property name="composer.updated" value="true" />
    </target>

    <!-- }}} -->

</project>